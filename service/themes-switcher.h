/*
 * Generated by gdbus-codegen 2.56.4. DO NOT EDIT.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from.
 */

#ifndef __THEMES_SWITCHER_H__
#define __THEMES_SWITCHER_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for com.github.trifonovkv.ThemesSwitcher */

#define TYPE_THEMES_SWITCHER (themes_switcher_get_type ())
#define THEMES_SWITCHER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_THEMES_SWITCHER, ThemesSwitcher))
#define IS_THEMES_SWITCHER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_THEMES_SWITCHER))
#define THEMES_SWITCHER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_THEMES_SWITCHER, ThemesSwitcherIface))

struct _ThemesSwitcher;
typedef struct _ThemesSwitcher ThemesSwitcher;
typedef struct _ThemesSwitcherIface ThemesSwitcherIface;

struct _ThemesSwitcherIface
{
  GTypeInterface parent_iface;
};

GType themes_switcher_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *themes_switcher_interface_info (void);
guint themes_switcher_override_properties (GObjectClass *klass, guint property_id_begin);


/* ---- */

#define TYPE_THEMES_SWITCHER_PROXY (themes_switcher_proxy_get_type ())
#define THEMES_SWITCHER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_THEMES_SWITCHER_PROXY, ThemesSwitcherProxy))
#define THEMES_SWITCHER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_THEMES_SWITCHER_PROXY, ThemesSwitcherProxyClass))
#define THEMES_SWITCHER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_THEMES_SWITCHER_PROXY, ThemesSwitcherProxyClass))
#define IS_THEMES_SWITCHER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_THEMES_SWITCHER_PROXY))
#define IS_THEMES_SWITCHER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_THEMES_SWITCHER_PROXY))

typedef struct _ThemesSwitcherProxy ThemesSwitcherProxy;
typedef struct _ThemesSwitcherProxyClass ThemesSwitcherProxyClass;
typedef struct _ThemesSwitcherProxyPrivate ThemesSwitcherProxyPrivate;

struct _ThemesSwitcherProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  ThemesSwitcherProxyPrivate *priv;
};

struct _ThemesSwitcherProxyClass
{
  GDBusProxyClass parent_class;
};

GType themes_switcher_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ThemesSwitcherProxy, g_object_unref)
#endif

void themes_switcher_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
ThemesSwitcher *themes_switcher_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
ThemesSwitcher *themes_switcher_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void themes_switcher_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
ThemesSwitcher *themes_switcher_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
ThemesSwitcher *themes_switcher_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_THEMES_SWITCHER_SKELETON (themes_switcher_skeleton_get_type ())
#define THEMES_SWITCHER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_THEMES_SWITCHER_SKELETON, ThemesSwitcherSkeleton))
#define THEMES_SWITCHER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_THEMES_SWITCHER_SKELETON, ThemesSwitcherSkeletonClass))
#define THEMES_SWITCHER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_THEMES_SWITCHER_SKELETON, ThemesSwitcherSkeletonClass))
#define IS_THEMES_SWITCHER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_THEMES_SWITCHER_SKELETON))
#define IS_THEMES_SWITCHER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_THEMES_SWITCHER_SKELETON))

typedef struct _ThemesSwitcherSkeleton ThemesSwitcherSkeleton;
typedef struct _ThemesSwitcherSkeletonClass ThemesSwitcherSkeletonClass;
typedef struct _ThemesSwitcherSkeletonPrivate ThemesSwitcherSkeletonPrivate;

struct _ThemesSwitcherSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  ThemesSwitcherSkeletonPrivate *priv;
};

struct _ThemesSwitcherSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType themes_switcher_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ThemesSwitcherSkeleton, g_object_unref)
#endif

ThemesSwitcher *themes_switcher_skeleton_new (void);


G_END_DECLS

#endif /* __THEMES_SWITCHER_H__ */
